From dedbe37c7f0ede7b513edb0dc2861ba175cdcdfa Mon Sep 17 00:00:00 2001
From: tpatzig <tpatzig@283d02a7-25f6-0310-bc7c-ecb5cbfe19da>
Date: Wed, 14 Jan 2009 20:20:46 +0000
Subject: [PATCH] a lot of bluez4 related adaptations

git-svn-id: svn://anonsvn.kde.org/home/kde/trunk/KDE/kdebase@911092 283d02a7-25f6-0310-bc7c-ecb5cbfe19da
---
 .../libs/solid/control/bluetoothinputdevice.cpp    |    4 +-
 .../libs/solid/control/bluetoothinterface.cpp      |  102 +++++++++++++++++---
 workspace/libs/solid/control/bluetoothinterface.h  |   20 +++-
 .../libs/solid/control/bluetoothremotedevice.cpp   |   83 +++++++++++++++--
 .../libs/solid/control/bluetoothremotedevice.h     |   40 ++++++++-
 .../libs/solid/control/ifaces/bluetoothinterface.h |    7 +-
 6 files changed, 228 insertions(+), 28 deletions(-)

diff --git a/workspace/libs/solid/control/bluetoothinputdevice.cpp b/workspace/libs/solid/control/bluetoothinputdevice.cpp
index b25a2fd..2ddaf3d 100644
--- a/workspace/libs/solid/control/bluetoothinputdevice.cpp
+++ b/workspace/libs/solid/control/bluetoothinputdevice.cpp
@@ -91,8 +91,8 @@ void Solid::Control::BluetoothInputDevicePrivate::setBackendObject(QObject *obje
     FrontendObjectPrivate::setBackendObject(object);
 
     if (object) {
-        QObject::connect(object, SIGNAL(propertyChanged(QString,QVariant)),
-                         parent(), SIGNAL(propertyChanged(QString,QVariant)));
+        QObject::connect(object, SIGNAL(propertyChanged(const QString&,const QVariant&)),
+                         parent(), SIGNAL(propertyChanged(const QString,const QVariant&)));
     }
 }
 
diff --git a/workspace/libs/solid/control/bluetoothinterface.cpp b/workspace/libs/solid/control/bluetoothinterface.cpp
index 3eb126a..fc562b2 100644
--- a/workspace/libs/solid/control/bluetoothinterface.cpp
+++ b/workspace/libs/solid/control/bluetoothinterface.cpp
@@ -25,7 +25,7 @@
 #include <QStringList>
 #include <QVariant>
 
-#include <kdebug.h>
+#include <KDebug>
 
 #include "ifaces/bluetoothinterface.h"
 
@@ -49,9 +49,12 @@ public:
     void setBackendObject(QObject *object);
 
     QPair<BluetoothRemoteDevice *, Ifaces::BluetoothRemoteDevice *> findRegisteredBluetoothRemoteDevice(const QString &ubi) const;
+    QPair<BluetoothInputDevice *, Ifaces::BluetoothInputDevice *> findRegisteredBluetoothInputDevice(const QString &ubi) const;
 
     mutable QMap<QString, QPair<BluetoothRemoteDevice *, Ifaces::BluetoothRemoteDevice *> > remoteDeviceMap;
+    mutable QMap<QString, QPair<BluetoothInputDevice *, Ifaces::BluetoothInputDevice *> > inputDeviceMap;
     mutable BluetoothRemoteDevice invalidDevice;
+    mutable BluetoothInputDevice invalidInputDevice;
 };
 }
 }
@@ -65,30 +68,39 @@ Solid::Control::BluetoothInterface::BluetoothInterface(const QString &ubi)
 {
     const BluetoothInterface &device = BluetoothManager::self().findBluetoothInterface(ubi);
     d->setBackendObject(device.d->backendObject());
+    QObject::connect(d->backendObject(), SIGNAL(deviceCreated(const QString &)),this, SLOT(slotDeviceCreated(const QString &)));
 }
 
 Solid::Control::BluetoothInterface::BluetoothInterface(QObject *backendObject)
         : QObject(), d(new BluetoothInterfacePrivate(this))
 {
     d->setBackendObject(backendObject);
+    QObject::connect(d->backendObject(), SIGNAL(deviceCreated(const QString &)),this, SLOT(slotDeviceCreated(const QString &)));
 }
 
 Solid::Control::BluetoothInterface::BluetoothInterface(const BluetoothInterface &device)
         : QObject(), d(new BluetoothInterfacePrivate(this))
 {
     d->setBackendObject(device.d->backendObject());
+    QObject::connect(d->backendObject(), SIGNAL(deviceCreated(const QString &)),this, SLOT(slotDeviceCreated(const QString &)));
 }
 
 Solid::Control::BluetoothInterface::~BluetoothInterface()
 {
     // Delete all the interfaces, they are now outdated
     typedef QPair<BluetoothRemoteDevice *, Ifaces::BluetoothRemoteDevice *> BluetoothRemoteDeviceIfacePair;
+    typedef QPair<BluetoothInputDevice *, Ifaces::BluetoothInputDevice *> BluetoothInputDeviceIfacePair;
 
     // Delete all the devices, they are now outdated
-    foreach (const BluetoothRemoteDeviceIfacePair &pair, d->remoteDeviceMap) {
+    foreach (const BluetoothRemoteDeviceIfacePair &pair, d->remoteDeviceMap.values()) {
         delete pair.first;
         delete pair.second;
     }
+    foreach (const BluetoothInputDeviceIfacePair &pair, d->inputDeviceMap.values()) {
+        delete pair.first;
+        delete pair.second;
+    }
+
 }
 
 Solid::Control::BluetoothInterface &Solid::Control::BluetoothInterface::operator=(const Solid::Control::BluetoothInterface  & dev)
@@ -108,9 +120,12 @@ void Solid::Control::BluetoothInterface::cancelDeviceCreation(const QString &add
     SOLID_CALL(Ifaces::BluetoothInterface *, d->backendObject(), cancelDeviceCreation(address));
 }
 
-QString Solid::Control::BluetoothInterface::createPairedDevice(const QString &address,const QString &adapterPath, const QString &capab) const
+void Solid::Control::BluetoothInterface::createPairedDevice(const QString &address,const QString &adapterPath, const QString &capab) const
 {
-    return_SOLID_CALL(Ifaces::BluetoothInterface *, d->backendObject(), QString(), createPairedDevice(address,adapterPath,capab));
+    Ifaces::BluetoothInterface *backend = qobject_cast<Ifaces::BluetoothInterface *>(d->backendObject());
+    if (backend == 0) 
+        return;
+    backend->createPairedDevice(address,adapterPath,capab);
 }
 
 QMap<QString, QVariant> Solid::Control::BluetoothInterface::getProperties() const
@@ -137,7 +152,7 @@ Solid::Control::BluetoothRemoteDeviceList Solid::Control::BluetoothInterface::li
 
     Solid::Control::BluetoothRemoteDeviceList list;
     foreach (const QString& ubi,ubis) {
-        BluetoothRemoteDevice remoteDevice = findBluetoothRemoteDevice(ubi);
+        BluetoothRemoteDevice* remoteDevice = findBluetoothRemoteDeviceUBI(ubi);
         list.append(remoteDevice);
     }
     return list;
@@ -184,13 +199,13 @@ void Solid::Control::BluetoothInterface::unregisterAgent(const QString &path) co
 }
 
 
-Solid::Control::BluetoothRemoteDevice Solid::Control::BluetoothInterface::findBluetoothRemoteDevice(const QString &address) const
+Solid::Control::BluetoothRemoteDevice Solid::Control::BluetoothInterface::findBluetoothRemoteDeviceAddr(const QString &address) const
 {
     Ifaces::BluetoothInterface *backend = qobject_cast<Ifaces::BluetoothInterface *>(d->backendObject());
     if (backend == 0) 
         return d->invalidDevice;
 
-    const QString ubi = backend->findDevice(address);
+    const QString ubi = getBluetoothRemoteDeviceUBI(address);
 
     QPair<BluetoothRemoteDevice *, Ifaces::BluetoothRemoteDevice *> pair = d->findRegisteredBluetoothRemoteDevice(ubi);
 
@@ -201,18 +216,56 @@ Solid::Control::BluetoothRemoteDevice Solid::Control::BluetoothInterface::findBl
     }
 }
 
-Solid::Control::BluetoothRemoteDevice * Solid::Control::BluetoothInterface::createBluetoothRemoteDevice(const QString &address)
+
+const QString Solid::Control::BluetoothInterface::getBluetoothRemoteDeviceUBI(const QString &address) const
 {
     Ifaces::BluetoothInterface *backend = qobject_cast<Ifaces::BluetoothInterface *>(d->backendObject());
     if (backend == 0) 
-        return 0;
+        return "";
+
+    const QString ubi = backend->findDevice(address);
+    return ubi;
+}
 
-    const QString ubi = backend->createDevice(address);
 
+void Solid::Control::BluetoothInterface::createBluetoothRemoteDevice(const QString &address)
+{
+    Ifaces::BluetoothInterface *backend = qobject_cast<Ifaces::BluetoothInterface *>(d->backendObject());
+    if (backend == 0) 
+        return;
+    backend->createDevice(address);
+}
+
+
+Solid::Control::BluetoothRemoteDevice* Solid::Control::BluetoothInterface::findBluetoothRemoteDeviceUBI(const QString &ubi) const
+{
     QPair<BluetoothRemoteDevice *, Ifaces::BluetoothRemoteDevice *> pair = d->findRegisteredBluetoothRemoteDevice(ubi);
     return pair.first;
 }
 
+Solid::Control::BluetoothInputDevice* Solid::Control::BluetoothInterface::findBluetoothInputDeviceUBI(const QString &ubi) const
+{
+    QPair<BluetoothInputDevice *, Ifaces::BluetoothInputDevice *> pair = d->findRegisteredBluetoothInputDevice(ubi);
+    return pair.first;
+}
+
+void Solid::Control::BluetoothInterface::slotDeviceCreated(const QString& ubi)
+{
+
+    Ifaces::BluetoothInterface *backend = qobject_cast<Ifaces::BluetoothInterface *>(d->backendObject());
+    Ifaces::BluetoothRemoteDevice *iface = 0;
+
+    if (backend != 0) {
+        iface = qobject_cast<Ifaces::BluetoothRemoteDevice *>(backend->createBluetoothRemoteDevice(ubi));
+    }
+
+    if (iface != 0) {
+        BluetoothRemoteDevice *device = new BluetoothRemoteDevice(iface);
+
+        QPair<BluetoothRemoteDevice *, Ifaces::BluetoothRemoteDevice *> pair(device, iface);
+        d->remoteDeviceMap[ubi] = pair;
+    }
+}
 
 QString Solid::Control::BluetoothInterface::address() const
 {
@@ -483,6 +536,7 @@ void Solid::Control::BluetoothInterfacePrivate::setBackendObject(QObject *object
 */
         QObject::connect(object, SIGNAL(deviceCreated(const QString &)),
                                  parent(), SIGNAL(deviceCreated(const QString &)));
+
         QObject::connect(object, SIGNAL(deviceDisappeared(const QString &)),
                                  parent(), SIGNAL(deviceDisappeared(const QString &)));
         QObject::connect(object, SIGNAL(deviceFound(const QString &, const QMap<QString,QVariant> &)),
@@ -492,8 +546,6 @@ void Solid::Control::BluetoothInterfacePrivate::setBackendObject(QObject *object
         QObject::connect(object, SIGNAL(propertyChanged(const QString &,const QVariant &)),
                                  parent(), SIGNAL(propertyChanged(const QString &, const QVariant &)));
 
-
-
     }
 }
 
@@ -523,4 +575,30 @@ QPair<Solid::Control::BluetoothRemoteDevice *, Solid::Control::Ifaces::Bluetooth
     }
 }
 
+QPair<Solid::Control::BluetoothInputDevice *, Solid::Control::Ifaces::BluetoothInputDevice *> Solid::Control::BluetoothInterfacePrivate::findRegisteredBluetoothInputDevice(const QString &ubi) const
+{
+    if (inputDeviceMap.contains(ubi)) {
+        return inputDeviceMap[ubi];
+    } else {
+        Ifaces::BluetoothInterface *backend = qobject_cast<Ifaces::BluetoothInterface *>(backendObject());
+        Ifaces::BluetoothInputDevice *iface = 0;
+
+        if (backend != 0) {
+            iface = qobject_cast<Ifaces::BluetoothInputDevice *>(backend->createBluetoothInputDevice(ubi));
+        }
+
+        if (iface != 0) {
+            BluetoothInputDevice *device = new BluetoothInputDevice(iface);
+
+            QPair<BluetoothInputDevice *, Ifaces::BluetoothInputDevice *> pair(device, iface);
+            inputDeviceMap[ubi] = pair;
+
+            return pair;
+        } else {
+            return QPair<BluetoothInputDevice *, Ifaces::BluetoothInputDevice *>(0, 0);
+        }
+
+    }
+}
+
 #include "bluetoothinterface.moc"
diff --git a/workspace/libs/solid/control/bluetoothinterface.h b/workspace/libs/solid/control/bluetoothinterface.h
index e6b3742..5b4da12 100644
--- a/workspace/libs/solid/control/bluetoothinterface.h
+++ b/workspace/libs/solid/control/bluetoothinterface.h
@@ -28,7 +28,9 @@
 #include <QtCore/QMap>
 
 #include "bluetoothremotedevice.h"
+#include "bluetoothinputdevice.h"
 #include "ifaces/bluetoothremotedevice.h"
+#include "ifaces/bluetoothinputdevice.h"
 
 
 
@@ -37,7 +39,7 @@ namespace Solid
 namespace Control
 {
 class BluetoothRemoteDevice;
-typedef QList<BluetoothRemoteDevice> BluetoothRemoteDeviceList;
+typedef QList<BluetoothRemoteDevice*> BluetoothRemoteDeviceList;
 class BluetoothInterfacePrivate;
 
 /**
@@ -115,7 +117,8 @@ public:
      * @param ubi the identifier of the bluetooth device to instantiate
      * @returns a bluetooth object, if a bluetooth device having the given UBI, for this interface exists, 0 otherwise
      */
-    Solid::Control::BluetoothRemoteDevice* createBluetoothRemoteDevice(const QString &address);
+    //Solid::Control::BluetoothRemoteDevice* createBluetoothRemoteDevice(const QString &address);
+    void createBluetoothRemoteDevice(const QString &address);
 
     /**
      * Finds a BluetoothRemoteDevice object given its UBI.
@@ -123,7 +126,13 @@ public:
      * @param ubi the identifier of the bluetooth remote device to find from this bluetooth interface
      * @returns a valid BluetoothRemoteDevice object if a remote device having the given UBI for this interface exists, an invalid BluetoothRemoteDevice object otherwise.
      */
-    Solid::Control::BluetoothRemoteDevice findBluetoothRemoteDevice(const QString &address) const;
+    const QString getBluetoothRemoteDeviceUBI(const QString &address) const;
+
+    Solid::Control::BluetoothRemoteDevice findBluetoothRemoteDeviceAddr(const QString &addr) const;
+
+    Solid::Control::BluetoothRemoteDevice* findBluetoothRemoteDeviceUBI(const QString &ubi) const;
+
+    Solid::Control::BluetoothInputDevice* findBluetoothInputDeviceUBI(const QString &ubi) const;
 
     /**
      * Retrieves the MAC address of the bluetooth interface/adapter.
@@ -296,7 +305,7 @@ public:
 //    bool isTrusted(const QString &);
 
 
-    QString createPairedDevice(const QString &, const QString &, const QString &) const;
+    void createPairedDevice(const QString &, const QString &, const QString &) const;
 
     QMap< QString, QVariant > getProperties() const;
 
@@ -557,6 +566,9 @@ private:
     QVariant getProperty(const QString&) const;
     BluetoothInterfacePrivate * const d;
 
+private slots:
+    void slotDeviceCreated(const QString& ubi);
+
 };
 
 } //Control
diff --git a/workspace/libs/solid/control/bluetoothremotedevice.cpp b/workspace/libs/solid/control/bluetoothremotedevice.cpp
index d9ec38d..8f4c672 100644
--- a/workspace/libs/solid/control/bluetoothremotedevice.cpp
+++ b/workspace/libs/solid/control/bluetoothremotedevice.cpp
@@ -88,6 +88,15 @@ QMap<QString,QVariant> Solid::Control::BluetoothRemoteDevice::getProperties()
     return_SOLID_CALL(Ifaces::BluetoothRemoteDevice *, d->backendObject(), (QMap< QString,QVariant >()), getProperties());
 }
 
+QVariant Solid::Control::BluetoothRemoteDevice::getProperty(const QString &key)
+{
+    QMap<QString, QVariant> props = getProperties();
+    if (props.contains(key))
+        return props[key];
+    else
+        return QVariant();
+}
+
 QStringList Solid::Control::BluetoothRemoteDevice::listNodes()
 {
     Q_D(const BluetoothRemoteDevice);
@@ -113,14 +122,65 @@ void Solid::Control::BluetoothRemoteDevice::disconnect()
 }
 
 
+QString Solid::Control::BluetoothRemoteDevice::address()
+{
+    QVariant var = getProperty("Address");
+
+    if (var.isValid())
+        return var.value<QString>();
+    else
+        return QString();
 
-/*
-QString Solid::Control::BluetoothRemoteDevice::address() const
+//    Q_D(const BluetoothRemoteDevice);
+//    return_SOLID_CALL(Ifaces::BluetoothRemoteDevice *, d->backendObject(), QString(), address());
+}
+
+bool Solid::Control::BluetoothRemoteDevice::isTrusted()
 {
-    Q_D(const BluetoothRemoteDevice);
-    return_SOLID_CALL(Ifaces::BluetoothRemoteDevice *, d->backendObject(), QString(), address());
+     QVariant var = getProperty("Trusted");
+
+    if (var.isValid())
+        return var.value<bool>();
+    else
+        return false;
+}
+
+void Solid::Control::BluetoothRemoteDevice::setTrusted(bool trust)
+{
+    setProperty("Trusted",QVariant(trust));
+}
+
+QString Solid::Control::BluetoothRemoteDevice::icon()
+{
+     QVariant var = getProperty("Icon");
+
+    if (var.isValid())
+        return var.value<QString>();
+    else
+        return "";
+}
+
+QStringList Solid::Control::BluetoothRemoteDevice::uuids()
+{
+     QVariant var = getProperty("UUIDs");
+
+    if (var.isValid())
+        return var.value<QStringList>();
+    else
+        return QStringList();
+}
+
+bool Solid::Control::BluetoothRemoteDevice::isConnected()
+{
+     QVariant var = getProperty("Connected");
+
+    if (var.isValid())
+        return var.value<bool>();
+    else
+        return false;
 }
 
+/*
 bool Solid::Control::BluetoothRemoteDevice::isConnected() const
 {
     Q_D(const BluetoothRemoteDevice);
@@ -168,12 +228,21 @@ QStringList Solid::Control::BluetoothRemoteDevice::serviceClasses() const
     Q_D(const BluetoothRemoteDevice);
     return_SOLID_CALL(Ifaces::BluetoothRemoteDevice *, d->backendObject(), QStringList(), serviceClasses());
 }
-QString Solid::Control::BluetoothRemoteDevice::name() const
+*/
+
+QString Solid::Control::BluetoothRemoteDevice::name()
 {
-    Q_D(const BluetoothRemoteDevice);
-    return_SOLID_CALL(Ifaces::BluetoothRemoteDevice *, d->backendObject(), QString(), name());
+    QVariant var = getProperty("Name");
+
+    if (var.isValid())
+        return var.value<QString>();
+    else
+        return QString();
+
+//    return_SOLID_CALL(Ifaces::BluetoothRemoteDevice *, d->backendObject(), QString(), name());
 }
 
+/*
 QString Solid::Control::BluetoothRemoteDevice::alias() const
 {
     Q_D(const BluetoothRemoteDevice);
diff --git a/workspace/libs/solid/control/bluetoothremotedevice.h b/workspace/libs/solid/control/bluetoothremotedevice.h
index c43b3ef..61a03ee 100644
--- a/workspace/libs/solid/control/bluetoothremotedevice.h
+++ b/workspace/libs/solid/control/bluetoothremotedevice.h
@@ -82,11 +82,46 @@ public:
     bool operator==(const BluetoothRemoteDevice  & other) const;
 
     /**
-     * The UBI of the remote de device.
+     * The UBI of the remote device.
      */
     QString ubi() const;
 
     /**
+     * The address of the remote device.
+     */
+    QString address();
+
+    /**
+     * The name of the remote device.
+     */
+    QString name();
+
+    /**
+     * The icon of the remote device.
+     */
+    QString icon();
+
+    /**
+     * The Trust state of the remote device.
+     */
+    bool isTrusted();
+
+    /**
+     * Set the Trust state of the remote device.
+     */
+    void setTrusted(bool);
+
+    /**
+     * Returns the service uuids of the remote device.
+     */
+    QStringList uuids();
+
+    /**
+     * The Connection state of the remote device.
+     */
+    bool isConnected();
+
+    /**
      * Retrieve all properties from the remote device.
      *
      * @returns a hash of named properties
@@ -157,6 +192,9 @@ protected:
 
 private:
     Q_PRIVATE_SLOT(d_func(), void _k_destroyed(QObject *))
+
+
+    QVariant getProperty(const QString &key);
 };
 
 } //Control
diff --git a/workspace/libs/solid/control/ifaces/bluetoothinterface.h b/workspace/libs/solid/control/ifaces/bluetoothinterface.h
index e23bbb0..3a10319 100644
--- a/workspace/libs/solid/control/ifaces/bluetoothinterface.h
+++ b/workspace/libs/solid/control/ifaces/bluetoothinterface.h
@@ -248,7 +248,8 @@ public:
 
     virtual QString findDevice(const QString &) const = 0;
 
-    virtual QString createDevice(const QString &) const = 0;
+    //virtual QString createDevice(const QString &) const = 0;
+    virtual void createDevice(const QString &) const = 0;
 
 
 
@@ -320,7 +321,9 @@ public:
      * @param ubi the identifier of the bluetooth remote device instantiated
      * @returns a new BluetoothRemoteDevice object if there's a device having the given UBI, 0 otherwise
      */
-    virtual QObject *createBluetoothRemoteDevice(const QString &address) = 0;
+    virtual QObject *createBluetoothRemoteDevice(const QString &ubi) = 0;
+
+    virtual QObject *createBluetoothInputDevice(const QString &ubi) = 0;
 
     /**
      * Marks the device as trusted.
-- 
1.6.1

