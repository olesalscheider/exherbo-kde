Upstream: yes

From 3f8f9395d11cf7a6e837190918322f523c46f574 Mon Sep 17 00:00:00 2001
From: Marco Martin <notmart@gmail.com>
Date: Thu, 5 Jun 2014 13:20:53 +0200
Subject: [PATCH 1/4] add a getter for translation domain

expose translationdomain from QmlObject as well
---
 src/kdeclarative/kdeclarative.cpp |  5 +++++
 src/kdeclarative/kdeclarative.h   |  6 ++++++
 src/kdeclarative/qmlobject.cpp    | 21 +++++++++++++++------
 src/kdeclarative/qmlobject.h      | 25 +++++++++++++++++++++++++
 4 files changed, 51 insertions(+), 6 deletions(-)

diff --git a/src/kdeclarative/kdeclarative.cpp b/src/kdeclarative/kdeclarative.cpp
index 54e2553..7f1c826 100644
--- a/src/kdeclarative/kdeclarative.cpp
+++ b/src/kdeclarative/kdeclarative.cpp
@@ -120,6 +120,11 @@ void KDeclarative::setTranslationDomain(const QString &translationDomain)
     d->translationDomain = translationDomain;
 }
 
+QString KDeclarative::translationDomain() const
+{
+    return d->translationDomain;
+}
+
 void KDeclarative::setupQmlJsDebugger()
 {
     if (QCoreApplication::arguments().contains(QLatin1String("-qmljsdebugger"))) {
diff --git a/src/kdeclarative/kdeclarative.h b/src/kdeclarative/kdeclarative.h
index a70b263..1d21964 100644
--- a/src/kdeclarative/kdeclarative.h
+++ b/src/kdeclarative/kdeclarative.h
@@ -72,6 +72,12 @@ public:
     void setTranslationDomain(const QString &translationDomain);
 
     /**
+     * @return the translation domain for the i18n calls done in this QML engine
+     * @since 5.0
+     */
+    QString translationDomain() const;
+
+    /**
      * This method must be called very early at startup time to ensure the
      * QQuickDebugger is enabled. Ideally it should be called in main(),
      * after command-line options are defined.
diff --git a/src/kdeclarative/qmlobject.cpp b/src/kdeclarative/qmlobject.cpp
index ca13097..7200ba7 100644
--- a/src/kdeclarative/qmlobject.cpp
+++ b/src/kdeclarative/qmlobject.cpp
@@ -60,6 +60,10 @@ public:
           component(0),
           delay(false)
     {
+        kdeclarative.setDeclarativeEngine(engine);
+        //binds things like kconfig and icons
+        kdeclarative.setupBindings();
+
         executionEndTimer = new QTimer(q);
         executionEndTimer->setInterval(0);
         executionEndTimer->setSingleShot(true);
@@ -88,6 +92,7 @@ public:
     QmlObjectIncubator incubator;
     QQmlComponent *component;
     QTimer *executionEndTimer;
+    KDeclarative kdeclarative;
     bool delay : 1;
 };
 
@@ -117,12 +122,6 @@ void QmlObjectPrivate::execute(const QUrl &source)
     component = new QQmlComponent(engine, q);
     delete incubator.object();
 
-    KDeclarative kdeclarative;
-    kdeclarative.setDeclarativeEngine(engine);
-
-    //binds things like kconfig and icons
-    kdeclarative.setupBindings();
-
     component->loadUrl(source);
 
     if (delay) {
@@ -169,6 +168,16 @@ QmlObject::~QmlObject()
     delete d;
 }
 
+void QmlObject::setTranslationDomain(const QString &translationDomain)
+{
+    d->kdeclarative.setTranslationDomain(translationDomain);
+}
+
+QString QmlObject::translationDomain() const
+{
+    return d->kdeclarative.translationDomain();
+}
+
 void QmlObject::setSource(const QUrl &source)
 {
     d->source = source;
diff --git a/src/kdeclarative/qmlobject.h b/src/kdeclarative/qmlobject.h
index 2da6c9c..cd74829 100644
--- a/src/kdeclarative/qmlobject.h
+++ b/src/kdeclarative/qmlobject.h
@@ -55,6 +55,7 @@ class KDECLARATIVE_EXPORT QmlObject : public QObject
     Q_OBJECT
 
     Q_PROPERTY(QUrl source READ source WRITE setSource)
+    Q_PROPERTY(QString translationDomain READ translationDomain WRITE setTranslationDomain)
     Q_PROPERTY(bool initializationDelayed READ isInitializationDelayed WRITE setInitializationDelayed)
     Q_PROPERTY(QObject *rootObject READ rootObject)
 
@@ -77,6 +78,30 @@ public:
     ~QmlObject();
 
     /**
+     * Call this method before calling setupBindings to install a translation domain for all
+     * i18n global functions. If a translation domain is set all i18n calls delegate to the
+     * matching i18nd calls with the provided translation domain.
+     *
+     * The translationDomain affects all i18n calls including those from imports. Because of
+     * that modules intended to be used as imports should prefer the i18nd variants and set
+     * the translation domain explicitly in each call.
+     *
+     * This method is only required if your declarative usage is inside a library. If it's
+     * in an application there is no need to set the translation domain as the application's
+     * domain can be used.
+     *
+     * @param translationDomain The translation domain to be used for i18n calls.
+     * @since 5.0
+     */
+    void setTranslationDomain(const QString &translationDomain);
+
+    /**
+     * @return the translation domain for the i18n calls done in this QML engine
+     * @since 5.0
+     */
+    QString translationDomain() const;
+
+    /**
      * Sets the path of the QML file to parse and execute
      *
      * @param path the absolute path of a QML file
-- 
2.0.0

