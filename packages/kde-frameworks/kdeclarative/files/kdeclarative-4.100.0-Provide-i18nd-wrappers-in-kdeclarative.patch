Upstream: yes

From 90c9c6563dbc7e6ad57ab374d2f9cab78ccd367b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Gr=C3=A4=C3=9Flin?= <mgraesslin@kde.org>
Date: Wed, 4 Jun 2014 14:54:27 +0200
Subject: [PATCH] Provide i18nd wrappers in kdeclarative

As QML might combine multiple modules with different cataloges we need
to be able to specify the translation domain explicitly. If there is a
need to use a specific domain for all i18n calls (e.g. in a library
using QML) there is the possibility to set a global translation domain
through KDeclarative. If such a domain is set all i18n calls delegate
to the i18nd variant.

Due to the nature of KDeclarative we cannot mix i18n calls with
different domains. If two modules would require to set the translation
domain it's bound to fail. Thus the recommendation is to use the i18nd
variants in any QML code which is intended to be used as an import.

REVIEW: 118526
---
 src/kdeclarative/kdeclarative.cpp         |   9 ++
 src/kdeclarative/kdeclarative.h           |  18 +++
 src/kdeclarative/private/kdeclarative_p.h |   1 +
 src/kdeclarative/private/rootcontext.cpp  | 212 +++++++++++++++++++++++++++++-
 src/kdeclarative/private/rootcontext_p.h  |  15 +++
 5 files changed, 251 insertions(+), 4 deletions(-)

diff --git a/src/kdeclarative/kdeclarative.cpp b/src/kdeclarative/kdeclarative.cpp
index a35dac5..54e2553 100644
--- a/src/kdeclarative/kdeclarative.cpp
+++ b/src/kdeclarative/kdeclarative.cpp
@@ -89,6 +89,10 @@ void KDeclarative::setupBindings()
     RootContext *contextObj = new RootContext(d->declarativeEngine.data());
     d->declarativeEngine.data()->rootContext()->setContextObject(contextObj);
 
+    if (!d->translationDomain.isNull()) {
+        contextObj->setProperty("translationDomain", d->translationDomain);
+    }
+
     /* Tell the engine to search for platform-specific imports first
        (so it will "win" in import name resolution).
        addImportPath adds the path at the beginning, so to honour user's
@@ -111,6 +115,11 @@ void KDeclarative::setupBindings()
     d->declarativeEngine.data()->addImageProvider(QString(QStringLiteral("icon")), new KIconProvider);
 }
 
+void KDeclarative::setTranslationDomain(const QString &translationDomain)
+{
+    d->translationDomain = translationDomain;
+}
+
 void KDeclarative::setupQmlJsDebugger()
 {
     if (QCoreApplication::arguments().contains(QLatin1String("-qmljsdebugger"))) {
diff --git a/src/kdeclarative/kdeclarative.h b/src/kdeclarative/kdeclarative.h
index b4a274b..a70b263 100644
--- a/src/kdeclarative/kdeclarative.h
+++ b/src/kdeclarative/kdeclarative.h
@@ -54,6 +54,24 @@ public:
     QQmlEngine *declarativeEngine() const;
 
     /**
+     * Call this method before calling setupBindings to install a translation domain for all
+     * i18n global functions. If a translation domain is set all i18n calls delegate to the
+     * matching i18nd calls with the provided translation domain.
+     *
+     * The translationDomain affects all i18n calls including those from imports. Because of
+     * that modules intended to be used as imports should prefer the i18nd variants and set
+     * the translation domain explicitly in each call.
+     *
+     * This method is only required if your declarative usage is inside a library. If it's
+     * in an application there is no need to set the translation domain as the application's
+     * domain can be used.
+     *
+     * @param translationDomain The translation domain to be used for i18n calls.
+     * @since 5.0
+     */
+    void setTranslationDomain(const QString &translationDomain);
+
+    /**
      * This method must be called very early at startup time to ensure the
      * QQuickDebugger is enabled. Ideally it should be called in main(),
      * after command-line options are defined.
diff --git a/src/kdeclarative/private/kdeclarative_p.h b/src/kdeclarative/private/kdeclarative_p.h
index 6b61d12..1e31628 100644
--- a/src/kdeclarative/private/kdeclarative_p.h
+++ b/src/kdeclarative/private/kdeclarative_p.h
@@ -33,6 +33,7 @@ public:
 
     QPointer<QQmlEngine> declarativeEngine;
     bool initialized;
+    QString translationDomain;
     static QStringList s_runtimePlatform;
 };
 
diff --git a/src/kdeclarative/private/rootcontext.cpp b/src/kdeclarative/private/rootcontext.cpp
index 1230666..d88b566 100644
--- a/src/kdeclarative/private/rootcontext.cpp
+++ b/src/kdeclarative/private/rootcontext.cpp
@@ -44,7 +44,12 @@ QString RootContext::i18n(const QString &message, const QString &param1, const Q
         return QString();
     }
 
-    KLocalizedString trMessage = ki18n(message.toUtf8().constData());
+    KLocalizedString trMessage;
+    if (!m_translationDomain.isNull()) {
+        trMessage = ki18nd(m_translationDomain.toUtf8().constData(), message.toUtf8().constData());
+    } else {
+        trMessage = ki18n(message.toUtf8().constData());
+    }
 
     if (!param1.isNull()) {
         trMessage = trMessage.subs(param1);
@@ -87,7 +92,12 @@ QString RootContext::i18nc(const QString &context, const QString &message, const
         return QString();
     }
 
-    KLocalizedString trMessage = ki18nc(context.toUtf8().constData(), message.toUtf8().constData());
+    KLocalizedString trMessage;
+    if (!m_translationDomain.isNull()) {
+        trMessage = ki18ndc(m_translationDomain.toUtf8().constData(), context.toUtf8().constData(), message.toUtf8().constData());
+    } else {
+        trMessage = ki18nc(context.toUtf8().constData(), message.toUtf8().constData());
+    }
 
     if (!param1.isNull()) {
         trMessage = trMessage.subs(param1);
@@ -130,7 +140,12 @@ QString RootContext::i18np(const QString &singular, const QString &plural, const
         return QString();
     }
 
-    KLocalizedString trMessage = ki18np(singular.toUtf8().constData(), plural.toUtf8().constData());
+    KLocalizedString trMessage;
+    if (!m_translationDomain.isNull()) {
+        trMessage = ki18ndp(m_translationDomain.toUtf8().constData(), singular.toUtf8().constData(), plural.toUtf8().constData());
+    } else {
+        trMessage = ki18np(singular.toUtf8().constData(), plural.toUtf8().constData());
+    }
 
     if (!param1.isNull()) {
         bool ok;
@@ -179,7 +194,196 @@ QString RootContext::i18ncp(const QString &context, const QString &singular, con
         return QString();
     }
 
-    KLocalizedString trMessage = ki18ncp(context.toUtf8().constData(), singular.toUtf8().constData(), plural.toUtf8().constData());
+    KLocalizedString trMessage;
+    if (!m_translationDomain.isNull()) {
+        trMessage = ki18ndcp(m_translationDomain.toUtf8().constData(), context.toUtf8().constData(), singular.toUtf8().constData(), plural.toUtf8().constData());
+    } else {
+        trMessage = ki18ncp(context.toUtf8().constData(), singular.toUtf8().constData(), plural.toUtf8().constData());
+    }
+
+    if (!param1.isNull()) {
+        bool ok;
+        int num = param1.toInt(&ok);
+        if (ok) {
+            trMessage = trMessage.subs(num);
+        } else {
+            trMessage = trMessage.subs(param1);
+        }
+    }
+    if (!param2.isNull()) {
+        trMessage = trMessage.subs(param2);
+    }
+    if (!param3.isNull()) {
+        trMessage = trMessage.subs(param3);
+    }
+    if (!param4.isNull()) {
+        trMessage = trMessage.subs(param4);
+    }
+    if (!param5.isNull()) {
+        trMessage = trMessage.subs(param5);
+    }
+    if (!param6.isNull()) {
+        trMessage = trMessage.subs(param6);
+    }
+    if (!param7.isNull()) {
+        trMessage = trMessage.subs(param7);
+    }
+    if (!param8.isNull()) {
+        trMessage = trMessage.subs(param8);
+    }
+    if (!param9.isNull()) {
+        trMessage = trMessage.subs(param9);
+    }
+    if (!param10.isNull()) {
+        trMessage = trMessage.subs(param10);
+    }
+
+    return trMessage.toString();
+}
+
+QString RootContext::i18nd(const QString &domain, const QString &message, const QString &param1, const QString &param2, const QString &param3, const QString &param4, const QString &param5, const QString &param6, const QString &param7, const QString &param8, const QString &param9, const QString &param10) const
+{
+    if (domain.isNull() || message.isNull()) {
+        qWarning() << "i18nd() needs at least two parameters";
+        return QString();
+    }
+
+    KLocalizedString trMessage = ki18nd(domain.toUtf8().constData(), message.toUtf8().constData());
+
+    if (!param1.isNull()) {
+        trMessage = trMessage.subs(param1);
+    }
+    if (!param2.isNull()) {
+        trMessage = trMessage.subs(param2);
+    }
+    if (!param3.isNull()) {
+        trMessage = trMessage.subs(param3);
+    }
+    if (!param4.isNull()) {
+        trMessage = trMessage.subs(param4);
+    }
+    if (!param5.isNull()) {
+        trMessage = trMessage.subs(param5);
+    }
+    if (!param6.isNull()) {
+        trMessage = trMessage.subs(param6);
+    }
+    if (!param7.isNull()) {
+        trMessage = trMessage.subs(param7);
+    }
+    if (!param8.isNull()) {
+        trMessage = trMessage.subs(param8);
+    }
+    if (!param9.isNull()) {
+        trMessage = trMessage.subs(param9);
+    }
+    if (!param10.isNull()) {
+        trMessage = trMessage.subs(param10);
+    }
+
+    return trMessage.toString();
+}
+
+QString RootContext::i18ndc(const QString &domain, const QString &context, const QString &message, const QString &param1, const QString &param2, const QString &param3, const QString &param4, const QString &param5, const QString &param6, const QString &param7, const QString &param8, const QString &param9, const QString &param10) const
+{
+    if (domain.isNull() || context.isNull() || message.isNull()) {
+        qWarning() << "i18ndc() needs at least three arguments";
+        return QString();
+    }
+
+    KLocalizedString trMessage = ki18ndc(domain.toUtf8().constData(), context.toUtf8().constData(), message.toUtf8().constData());
+
+    if (!param1.isNull()) {
+        trMessage = trMessage.subs(param1);
+    }
+    if (!param2.isNull()) {
+        trMessage = trMessage.subs(param2);
+    }
+    if (!param3.isNull()) {
+        trMessage = trMessage.subs(param3);
+    }
+    if (!param4.isNull()) {
+        trMessage = trMessage.subs(param4);
+    }
+    if (!param5.isNull()) {
+        trMessage = trMessage.subs(param5);
+    }
+    if (!param6.isNull()) {
+        trMessage = trMessage.subs(param6);
+    }
+    if (!param7.isNull()) {
+        trMessage = trMessage.subs(param7);
+    }
+    if (!param8.isNull()) {
+        trMessage = trMessage.subs(param8);
+    }
+    if (!param9.isNull()) {
+        trMessage = trMessage.subs(param9);
+    }
+    if (!param10.isNull()) {
+        trMessage = trMessage.subs(param10);
+    }
+
+    return trMessage.toString();
+}
+
+QString RootContext::i18ndp(const QString &domain, const QString &singular, const QString &plural, const QString &param1, const QString &param2, const QString &param3, const QString &param4, const QString &param5, const QString &param6, const QString &param7, const QString &param8, const QString &param9, const QString &param10) const
+{
+    if (domain.isNull() || singular.isNull() || plural.isNull()) {
+        qWarning() << "i18ndp() needs at least three arguments";
+        return QString();
+    }
+
+    KLocalizedString trMessage = ki18ndp(domain.toUtf8().constData(), singular.toUtf8().constData(), plural.toUtf8().constData());
+
+    if (!param1.isNull()) {
+        bool ok;
+        int num = param1.toInt(&ok);
+        if (ok) {
+            trMessage = trMessage.subs(num);
+        } else {
+            trMessage = trMessage.subs(param1);
+        }
+    }
+    if (!param2.isNull()) {
+        trMessage = trMessage.subs(param2);
+    }
+    if (!param3.isNull()) {
+        trMessage = trMessage.subs(param3);
+    }
+    if (!param4.isNull()) {
+        trMessage = trMessage.subs(param4);
+    }
+    if (!param5.isNull()) {
+        trMessage = trMessage.subs(param5);
+    }
+    if (!param6.isNull()) {
+        trMessage = trMessage.subs(param6);
+    }
+    if (!param7.isNull()) {
+        trMessage = trMessage.subs(param7);
+    }
+    if (!param8.isNull()) {
+        trMessage = trMessage.subs(param8);
+    }
+    if (!param9.isNull()) {
+        trMessage = trMessage.subs(param9);
+    }
+    if (!param10.isNull()) {
+        trMessage = trMessage.subs(param10);
+    }
+
+    return trMessage.toString();
+}
+
+QString RootContext::i18ndcp(const QString &domain, const QString &context, const QString &singular, const QString &plural, const QString &param1, const QString &param2, const QString &param3, const QString &param4, const QString &param5, const QString &param6, const QString &param7, const QString &param8, const QString &param9, const QString &param10) const
+{
+    if (domain.isNull() || context.isNull() || singular.isNull() || plural.isNull()) {
+        qWarning() << "i18ndcp() needs at least four arguments";
+        return QString();
+    }
+
+    KLocalizedString trMessage = ki18ndcp(domain.toUtf8().constData(), context.toUtf8().constData(), singular.toUtf8().constData(), plural.toUtf8().constData());
 
     if (!param1.isNull()) {
         bool ok;
diff --git a/src/kdeclarative/private/rootcontext_p.h b/src/kdeclarative/private/rootcontext_p.h
index 16694b1..94df09f 100644
--- a/src/kdeclarative/private/rootcontext_p.h
+++ b/src/kdeclarative/private/rootcontext_p.h
@@ -27,6 +27,7 @@ namespace KDeclarative {
 class RootContext : public QObject
 {
     Q_OBJECT
+    Q_PROPERTY(QString translationDomain MEMBER m_translationDomain NOTIFY translationDomainChanged)
 
 public:
     RootContext(QObject *parent = 0);
@@ -39,6 +40,20 @@ public:
     Q_INVOKABLE QString i18np(const QString &singular, const QString &plural, const QString &param1 = QString(), const QString &param2 = QString(), const QString &param3 = QString(), const QString &param4 = QString(), const QString &param5 = QString(), const QString &param6 = QString(), const QString &param7 = QString(), const QString &param8 = QString(), const QString &param9 = QString(), const QString &param10 = QString()) const;
 
     Q_INVOKABLE QString i18ncp(const QString &context, const QString &singular, const QString &plural, const QString &param1 = QString(), const QString &param2 = QString(), const QString &param3 = QString(), const QString &param4 = QString(), const QString &param5 = QString(), const QString &param6 = QString(), const QString &param7 = QString(), const QString &param8 = QString(), const QString &param9 = QString(), const QString &param10 = QString()) const;
+
+    Q_INVOKABLE QString i18nd(const QString &domain, const QString &message, const QString &param1 = QString(), const QString &param2 = QString(), const QString &param3 = QString(), const QString &param4 = QString(), const QString &param5 = QString(), const QString &param6 = QString(), const QString &param7 = QString(), const QString &param8 = QString(), const QString &param9 = QString(), const QString &param10 = QString()) const;
+
+    Q_INVOKABLE QString i18ndc(const QString &domain, const QString &context, const QString &message, const QString &param1 = QString(), const QString &param2 = QString(), const QString &param3 = QString(), const QString &param4 = QString(), const QString &param5 = QString(), const QString &param6 = QString(), const QString &param7 = QString(), const QString &param8 = QString(), const QString &param9 = QString(), const QString &param10 = QString()) const;
+
+    Q_INVOKABLE QString i18ndp(const QString &domain, const QString &singular, const QString &plural, const QString &param1 = QString(), const QString &param2 = QString(), const QString &param3 = QString(), const QString &param4 = QString(), const QString &param5 = QString(), const QString &param6 = QString(), const QString &param7 = QString(), const QString &param8 = QString(), const QString &param9 = QString(), const QString &param10 = QString()) const;
+
+    Q_INVOKABLE QString i18ndcp(const QString &domain, const QString &context, const QString &singular, const QString &plural, const QString &param1 = QString(), const QString &param2 = QString(), const QString &param3 = QString(), const QString &param4 = QString(), const QString &param5 = QString(), const QString &param6 = QString(), const QString &param7 = QString(), const QString &param8 = QString(), const QString &param9 = QString(), const QString &param10 = QString()) const;
+
+Q_SIGNALS:
+    void translationDomainChanged(const QString&);
+
+private:
+    QString m_translationDomain;
 };
 
 }
-- 
2.0.0

