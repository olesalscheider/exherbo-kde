Upstream: yes

From 50f7522c5162632a907f298160ac1efc1af08f93 Mon Sep 17 00:00:00 2001
From: Vishesh Handa <me@vhanda.in>
Date: Wed, 11 Jun 2014 15:59:46 +0200
Subject: [PATCH 1/2] Add the concept of disabled categories

Each runner can provide a list of categories which can be used to
provide the runner extra information about which categories should be
given. This is quite useful when a single runner provides many different
categories and not all are required.

Additionally, the RunnerManager also disables runners whose categories
are disabled.

REVIEW: 118148
---
 src/abstractrunner.cpp |  5 +++++
 src/abstractrunner.h   | 11 ++++++++++
 src/runnercontext.cpp  | 11 ++++++++++
 src/runnercontext.h    | 14 +++++++++++++
 src/runnermanager.cpp  | 56 ++++++++++++++++++++++++++++++++++++++++++++++++--
 src/runnermanager.h    | 12 +++++++++++
 6 files changed, 107 insertions(+), 2 deletions(-)

diff --git a/src/abstractrunner.cpp b/src/abstractrunner.cpp
index c64c510..a48fd0c 100644
--- a/src/abstractrunner.cpp
+++ b/src/abstractrunner.cpp
@@ -264,6 +264,11 @@ void AbstractRunner::run(const Plasma::RunnerContext &search, const Plasma::Quer
 {
 }
 
+QStringList AbstractRunner::categories() const
+{
+    return QStringList() << name();
+}
+
 void AbstractRunner::match(Plasma::RunnerContext &search)
 {
 }
diff --git a/src/abstractrunner.h b/src/abstractrunner.h
index d7d13ce..0958a28 100644
--- a/src/abstractrunner.h
+++ b/src/abstractrunner.h
@@ -173,6 +173,17 @@ class KRUNNER_EXPORT AbstractRunner : public QObject
         virtual void run(const Plasma::RunnerContext &context, const Plasma::QueryMatch &match);
 
         /**
+         * Return a list of categories that this runner provides. By default
+         * this list just contains the runners name. It is used by the runner manager
+         * to disable certain runners if all the categories they provide have
+         * been disabled.
+         *
+         * This list of categories is also used to provide a better way to
+         * configure the runner instead of the typical on / off switch.
+         */
+        virtual QStringList categories() const;
+
+        /**
          * The nominal speed of the runner.
          * @see setSpeed
          */
diff --git a/src/runnercontext.cpp b/src/runnercontext.cpp
index ddeff28..dcd8db7 100644
--- a/src/runnercontext.cpp
+++ b/src/runnercontext.cpp
@@ -257,6 +257,7 @@ class RunnerContextPrivate : public QSharedData
         QHash<QString, int> launchCounts;
         QString term;
         QString mimeType;
+        QStringList enabledCategories;
         RunnerContext::Type type;
         RunnerContext * q;
         static RunnerContext s_dummyContext;
@@ -351,6 +352,16 @@ QString RunnerContext::query() const
     return d->term;
 }
 
+void RunnerContext::setEnabledCategories(const QStringList& categories)
+{
+    d->enabledCategories = categories;
+}
+
+QStringList RunnerContext::enabledCategories() const
+{
+    return d->enabledCategories;
+}
+
 RunnerContext::Type RunnerContext::type() const
 {
     return d->type;
diff --git a/src/runnercontext.h b/src/runnercontext.h
index 0fe0038..a571314 100644
--- a/src/runnercontext.h
+++ b/src/runnercontext.h
@@ -101,6 +101,20 @@ class KRUNNER_EXPORT RunnerContext : public QObject
         Type type() const;
 
         /**
+         * A list of categories of which results should be returned.
+         * This list is typically populated from the AbstractRunner::categories
+         * function.
+         */
+        QStringList enabledCategories() const;
+
+        /**
+         * Sets the list of enabled categories. Runners can use this list
+         * to optimize themselves by only returning results from the enabled
+         * categories
+         */
+        void setEnabledCategories(const QStringList &categories);
+
+        /**
          * The mimetype that the search term refers to, if discoverable.
          *
          * @return QString() if the mimetype can not be determined, otherwise
diff --git a/src/runnermanager.cpp b/src/runnermanager.cpp
index d9b6da6..9d61f79 100644
--- a/src/runnermanager.cpp
+++ b/src/runnermanager.cpp
@@ -113,6 +113,7 @@ public:
         const int cap = qMax(2, numThreads/2);
         DefaultRunnerPolicy::instance().setCap(cap);
 
+        enabledCategories = config.readEntry("enabledCategories", QStringList());
         context.restore(config);
     }
 
@@ -181,6 +182,7 @@ public:
 
         advertiseSingleRunnerIds.clear();
 
+        QStringList allCategories;
         QSet<AbstractRunner *> deadRunners;
         QMutableListIterator<KPluginInfo> it(offers);
         while (it.hasNext()) {
@@ -207,11 +209,30 @@ public:
 
             //qDebug() << loadAll << description.isPluginEnabled() << noWhiteList << whiteList.contains(runnerName);
             if (selected) {
+                AbstractRunner *runner = 0;
                 if (!loaded) {
-                    AbstractRunner *runner = loadInstalledRunner(description.service());
+                    runner = loadInstalledRunner(description.service());
+                } else {
+                    runner = runners.value(runnerName);
+                }
+
+                if (runner) {
+                    const QStringList categories = runner->categories();
+                    allCategories << categories;
+
+                    bool allCategoriesDisabled = true;
+                    Q_FOREACH (const QString &cat, categories) {
+                        if (enabledCategories.contains(cat)) {
+                            allCategoriesDisabled = false;
+                            break;
+                        }
+                    }
 
-                    if (runner) {
+                    if (enabledCategories.isEmpty() || !allCategoriesDisabled) {
                         runners.insert(runnerName, runner);
+                    } else {
+                        runners.remove(runnerName);
+                        deadRunners.insert(runner);
                     }
                 }
             } else if (loaded) {
@@ -223,6 +244,10 @@ public:
             }
         }
 
+        if (enabledCategories.isEmpty()) {
+            enabledCategories = allCategories;
+        }
+
         if (!deadRunners.isEmpty()) {
                 QSet<QSharedPointer<FindMatchesJob> > deadJobs;
                 auto it = searchJobs.begin();
@@ -422,6 +447,7 @@ public:
     QSet<QSharedPointer<FindMatchesJob> > searchJobs;
     QSet<QSharedPointer<FindMatchesJob> > oldSearchJobs;
     KConfigGroup conf;
+    QStringList enabledCategories;
     QString singleModeRunnerId;
     bool loadAll : 1;
     bool prepped : 1;
@@ -482,12 +508,37 @@ void RunnerManager::setAllowedRunners(const QStringList &runners)
     }
 }
 
+void RunnerManager::setEnabledCategories(const QStringList& categories)
+{
+    KConfigGroup config = d->configGroup();
+    config.writeEntry("enabledCategories", categories);
+
+    d->enabledCategories = categories;
+
+    if (!d->runners.isEmpty()) {
+        d->loadRunners();
+    }
+}
+
 QStringList RunnerManager::allowedRunners() const
 {
     KConfigGroup config = d->configGroup();
     return config.readEntry("pluginWhiteList", QStringList());
 }
 
+QStringList RunnerManager::enabledCategories() const
+{
+    KConfigGroup config = d->configGroup();
+    QStringList list = config.readEntry("enabledCategories", QStringList());
+    if (list.isEmpty()) {
+        Q_FOREACH (AbstractRunner* runner, d->runners) {
+            list << runner->categories();
+        }
+    }
+
+    return list;
+}
+
 void RunnerManager::loadRunner(const KService::Ptr service)
 {
     KPluginInfo description(service);
@@ -744,6 +795,7 @@ void RunnerManager::launchQuery(const QString &untrimmedTerm, const QString &run
     reset();
 //    qDebug() << "runners searching for" << term << "on" << runnerName;
     d->context.setQuery(term);
+    d->context.setEnabledCategories(d->enabledCategories);
 
     QHash<QString, AbstractRunner*> runable;
 
diff --git a/src/runnermanager.h b/src/runnermanager.h
index 94d0454..bf9e58e 100644
--- a/src/runnermanager.h
+++ b/src/runnermanager.h
@@ -165,6 +165,13 @@ class KRUNNER_EXPORT RunnerManager : public QObject
         void setAllowedRunners(const QStringList &runners);
 
         /**
+         * Sets the list of categories which matches should be
+         * returned for. It also internally tries not to execute the
+         * runners which do not fall in this category.
+         */
+        void setEnabledCategories(const QStringList &categories);
+
+        /**
          * Attempts to add the AbstractRunner plugin represented
          * by the KService passed in. Usually one can simply let
          * the configuration of plugins handle loading Runner plugins,
@@ -194,6 +201,11 @@ class KRUNNER_EXPORT RunnerManager : public QObject
         QStringList allowedRunners() const;
 
         /**
+         * @return the list of enabled categories
+         */
+        QStringList enabledCategories() const;
+
+        /**
          * @return mime data of the specified match
          * @since 4.5
          */
-- 
2.0.0


From 3331c7ecc80e71cc567f0e6346cec55eecf5b49f Mon Sep 17 00:00:00 2001
From: Vishesh Handa <me@vhanda.in>
Date: Fri, 13 Jun 2014 15:17:15 +0200
Subject: [PATCH 2/2] AbstractRunner: Add a categoryIcon virtual function

This function is mostly used in the KCM in order to provide nice looking
icons when displaying all the categories for the runners.
---
 src/abstractrunner.cpp | 5 +++++
 src/abstractrunner.h   | 9 +++++++++
 2 files changed, 14 insertions(+)

diff --git a/src/abstractrunner.cpp b/src/abstractrunner.cpp
index a48fd0c..38b9177 100644
--- a/src/abstractrunner.cpp
+++ b/src/abstractrunner.cpp
@@ -269,6 +269,11 @@ QStringList AbstractRunner::categories() const
     return QStringList() << name();
 }
 
+QIcon AbstractRunner::categoryIcon(const QString&) const
+{
+    return icon();
+}
+
 void AbstractRunner::match(Plasma::RunnerContext &search)
 {
 }
diff --git a/src/abstractrunner.h b/src/abstractrunner.h
index 0958a28..1de3fec 100644
--- a/src/abstractrunner.h
+++ b/src/abstractrunner.h
@@ -184,6 +184,15 @@ class KRUNNER_EXPORT AbstractRunner : public QObject
         virtual QStringList categories() const;
 
         /**
+         * Returns the icon which accurately describes the category \p category.
+         * This is meant to be used in a configuration dialog when showing
+         * all the categories.
+         *
+         * By default this returns the icon of the AbstractRunner
+         */
+        virtual QIcon categoryIcon(const QString& category) const;
+
+        /**
          * The nominal speed of the runner.
          * @see setSpeed
          */
-- 
2.0.0

