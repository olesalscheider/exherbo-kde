Upstream: yes, backported from master

From a458f6fa4008f9ebfbfd61576ea34b4900795930 Mon Sep 17 00:00:00 2001
From: Alex Merry <kde@randomguy3.me.uk>
Date: Fri, 24 Aug 2012 02:16:15 +0100
Subject: [PATCH] CMake checks for FFmpeg API changes

FFmpeg breaks bc every so often.  The safest way to deal with this is
with CMake checks for the new API.  This implements such checks for most
of the recent changes and deprecations (one function that is deprecated
in ffmpeg 0.11 remains).
---
 CMakeLists.txt                              | 47 ++++++++++++++++++++++
 config-k3b.h.cmake                          | 14 ++++++-
 plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp | 61 ++++++++++++++++-------------
 3 files changed, 93 insertions(+), 29 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 64adada..f1ee779 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -100,6 +100,53 @@ if(K3B_BUILD_FFMPEG_DECODER_PLUGIN)
     "Needed for the K3b FFmpeg decoder plugin which can decode virtually all audio types."
     "http://ffmpeg.org/"
     FALSE "" "")
+  if(FFMPEG_FOUND)
+    include(CMakePushCheckState)
+    cmake_push_check_state()
+
+    if(CMAKE_COMPILER_IS_GNUCC)
+      # FindKDE4Internal.cmake screws things up
+      set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} -std=c99)
+    endif(CMAKE_COMPILER_IS_GNUCC)
+
+    if(FFMPEG_INCLUDE_DIR_OLD_STYLE)
+      set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${FFMPEG_INCLUDE_DIR_OLD_STYLE})
+      set(FFMPEG_HEADERS ffmpeg/avcodec.h ffmpeg/avformat.h)
+    else(FFMPEG_INCLUDE_DIR_OLD_STYLE)
+      set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${FFMPEG_INCLUDE_DIR} ${FFMPEG_INCLUDE_DIRS})
+      set(FFMPEG_HEADERS libavcodec/avcodec.h libavformat/avformat.h)
+      set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -DNEWFFMPEGAVCODECPATH)
+    endif(FFMPEG_INCLUDE_DIR_OLD_STYLE)
+    set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${FFMPEG_LIBRARIES})
+
+    check_symbol_exists(avformat_open_input "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_OPEN_INPUT)
+    check_symbol_exists(av_dump_format "${FFMPEG_HEADERS}" HAVE_FFMPEG_AV_DUMP_FORMAT)
+    check_symbol_exists(avformat_find_stream_info "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO)
+    check_symbol_exists(avformat_close_input "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT)
+    check_symbol_exists(avcodec_open2 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_OPEN2)
+    check_symbol_exists(avcodec_decode_audio2 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_DECODE_AUDIO2)
+    check_symbol_exists(avcodec_decode_audio3 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3)
+    check_symbol_exists(avcodec_decode_audio4 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_DECODE_AUDIO4)
+    include(CheckCSourceCompiles)
+    check_c_source_compiles("
+      #ifdef NEWFFMPEGAVCODECPATH
+      #include <libavcodec/avcodec.h>
+      #else
+      #include <ffmpeg/avcodec.h>
+      #endif
+      int main() { enum AVMediaType t = AVMEDIA_TYPE_UNKNOWN; return 0; }
+      " HAVE_FFMPEG_AVMEDIA_TYPE)
+    check_c_source_compiles("
+      #ifdef NEWFFMPEGAVCODECPATH
+      #include <libavcodec/avcodec.h>
+      #else
+      #include <ffmpeg/avcodec.h>
+      #endif
+      int main() { enum CodecID t = CODEC_ID_MP3; return 0; }
+      " HAVE_FFMPEG_CODEC_MP3)
+
+    cmake_pop_check_state()
+  endif(FFMPEG_FOUND)
 endif(K3B_BUILD_FFMPEG_DECODER_PLUGIN)
 
 if(K3B_BUILD_FLAC_DECODER_PLUGIN)
diff --git a/config-k3b.h.cmake b/config-k3b.h.cmake
index 9a4e618..819c574 100644
--- a/config-k3b.h.cmake
+++ b/config-k3b.h.cmake
@@ -21,4 +21,16 @@
 
 #cmakedefine HAVE_BYTESWAP_H 1
 
-#cmakedefine WORDS_BIGENDIAN 1
+#cmakedefine WORDS_BIGENDIAN
+
+#cmakedefine HAVE_FFMPEG_AVFORMAT_OPEN_INPUT
+#cmakedefine HAVE_FFMPEG_AV_DUMP_FORMAT
+#cmakedefine HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO
+#cmakedefine HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT
+#cmakedefine HAVE_FFMPEG_AVCODEC_OPEN2
+#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO2
+#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3
+#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO4
+#cmakedefine HAVE_FFMPEG_AVMEDIA_TYPE
+#cmakedefine HAVE_FFMPEG_CODEC_MP3
+
diff --git a/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp b/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp
index 024c18c..0a8fabc 100644
--- a/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp
+++ b/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp
@@ -42,6 +42,28 @@ extern "C" {
 #define FFMPEG_BUILD_PRE_4629
 #endif
 
+#ifndef HAVE_FFMPEG_AVFORMAT_OPEN_INPUT
+//      this works because the parameters/options are not used
+#  define avformat_open_input(c,s,f,o) av_open_input_file(c,s,f,0,o)
+#endif
+#ifndef HAVE_FFMPEG_AV_DUMP_FORMAT
+#  define av_dump_format(c,x,f,y) dump_format(c,x,f,y)
+#endif
+#ifndef HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO
+#  define avformat_find_stream_info(c,o) av_find_stream_info(c)
+#endif
+#ifndef HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT
+#  define avformat_close_input(c) av_close_input_file(*c)
+#endif
+#ifndef HAVE_FFMPEG_AVCODEC_OPEN2
+#  define avcodec_open2(a,c,o) avcodec_open(a,c)
+#endif
+#ifndef HAVE_FFMPEG_AVMEDIA_TYPE
+#  define AVMEDIA_TYPE_AUDIO CODEC_TYPE_AUDIO
+#endif
+#ifndef HAVE_FFMPEG_CODEC_MP3
+#  define CODEC_ID_MP3 CODEC_ID_MP3LAME
+#endif
 
 K3bFFMpegWrapper* K3bFFMpegWrapper::s_instance = 0;
 
@@ -88,18 +110,14 @@ bool K3bFFMpegFile::open()
     close();
 
     // open the file
-#if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(53,2,0)
     int err = ::avformat_open_input( &d->formatContext, m_filename.toLocal8Bit(), 0, 0 );
-#else
-    int err = ::av_open_input_file( &d->formatContext, m_filename.toLocal8Bit(), 0, 0, 0 );
-#endif
     if( err < 0 ) {
         kDebug() << "(K3bFFMpegFile) unable to open " << m_filename << " with error " << err;
         return false;
     }
 
     // analyze the streams
-    ::av_find_stream_info( d->formatContext );
+    ::avformat_find_stream_info( d->formatContext, 0 );
 
     // we only handle files containing one audio stream
     if( d->formatContext->nb_streams != 1 ) {
@@ -113,12 +131,7 @@ bool K3bFFMpegFile::open()
 #else
     ::AVCodecContext* codecContext =  d->formatContext->streams[0]->codec;
 #endif
-    if( codecContext->codec_type != 
-#if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(52, 64, 0)
-        AVMEDIA_TYPE_AUDIO)
-#else
-        CODEC_TYPE_AUDIO)
-#endif
+    if( codecContext->codec_type != AVMEDIA_TYPE_AUDIO)
     {
         kDebug() << "(K3bFFMpegFile) not a simple audio stream: " << m_filename;
         return false;
@@ -133,7 +146,7 @@ bool K3bFFMpegFile::open()
 
     // open the codec on our context
     kDebug() << "(K3bFFMpegFile) found codec for " << m_filename;
-    if( ::avcodec_open( codecContext, d->codec ) < 0 ) {
+    if( ::avcodec_open2( codecContext, d->codec, 0 ) < 0 ) {
         kDebug() << "(K3bFFMpegDecoderFactory) could not open codec.";
         return false;
     }
@@ -147,11 +160,7 @@ bool K3bFFMpegFile::open()
     }
 
     // dump some debugging info
-#if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(53,2,0)
     ::av_dump_format( d->formatContext, 0, m_filename.toLocal8Bit(), 0 );
-#else
-    ::dump_format( d->formatContext, 0, m_filename.toLocal8Bit(), 0 );
-#endif
 
     return true;
 }
@@ -173,7 +182,7 @@ void K3bFFMpegFile::close()
     }
 
     if( d->formatContext ) {
-        ::av_close_input_file( d->formatContext );
+        ::avformat_close_input( &d->formatContext );
         d->formatContext = 0;
     }
 }
@@ -222,11 +231,7 @@ QString K3bFFMpegFile::typeComment() const
         return i18n("Windows Media v1");
     case CODEC_ID_WMAV2:
         return i18n("Windows Media v2");
-#if LIBAVCODEC_VERSION_MAJOR < 52
-    case CODEC_ID_MP3LAME:
-#else
     case CODEC_ID_MP3:
-#endif
         return i18n("MPEG 1 Layer III");
     case CODEC_ID_AAC:
         return i18n("Advanced Audio Coding (AAC)");
@@ -329,14 +334,14 @@ int K3bFFMpegFile::fillOutputBuffer()
         d->outputBufferPos = d->alignedOutputBuffer;
         d->outputBufferSize = AVCODEC_MAX_AUDIO_FRAME_SIZE;
 
-#if LIBAVCODEC_VERSION_MAJOR < 52
-        int len = ::avcodec_decode_audio(
-#else
-   #if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(52, 64, 0)
+#ifdef HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3
         int len = ::avcodec_decode_audio3(
-   #else
+#else
+#  ifdef HAVE_FFMPEG_AVCODEC_DECODE_AUDIO2
         int len = ::avcodec_decode_audio2(
-   #endif
+#  else
+        int len = ::avcodec_decode_audio(
+#  endif
 #endif
 
 #ifdef FFMPEG_BUILD_PRE_4629
@@ -346,7 +351,7 @@ int K3bFFMpegFile::fillOutputBuffer()
 #endif
             (short*)d->alignedOutputBuffer,
             &d->outputBufferSize,
-#if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(52, 64, 0)
+#ifdef HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3
             &d->packet );
 #else
             d->packetData, d->packetSize );
-- 
1.8.4.3

